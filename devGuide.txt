$ npm install -g @nestjs/cli(globle)
nest new ...

npm install @nestjs/config (create env)
rm -rf dist node_modules package-lock.json

2. database
npm install @nestjs/typeorm typeorm pg
docker run --name test -e POSTGRES_USER=junjin -e POSTGRES_PASSWORD=000000 -p 5432:5432 -d postgres

docker exec -it test psql -U junjin -d my_app

3.JWT
npm install @nestjs/jwt @nestjs/passport passport passport-jwt
npm install @types/passport-jwt --save-dev

npm install @nestjs/throttler rate Limiting

npm install @nestjs/swagger swagger-ui-express : swagger
npm uninstall @nestjs/cache-manager cache-manager




{
    "username": "Admin",
    "password": "admin0609"
}


1. 认证控制器(Auth Controller)优化
使用DTOs替代直接从Body获取参数：
创建 LoginDto 和 RegisterDto 来规范请求体
添加验证装饰器确保数据有效性
减少在控制器中的参数解构
2. 用户控制器(Users Controller)优化
添加缺失的端点：
实现删除用户的端点 (DELETE)
添加分页到 findAll 方法，避免返回过多数据
3. 角色基础访问控制(RBAC)
创建角色守卫：
添加 RolesGuard 控制基于角色的访问
实现 Roles 装饰器，允许标记需要特定角色的端点
这样只有具有适当角色的用户才能访问某些资源
4. 请求限流(Rate Limiting)
保护登录端点防止暴力破解：
实现 IP 或用户名基础的请求限制
对于敏感操作，如登录、注册，限制请求频率
5. 异常过滤器和响应格式标准化
创建全局异常过滤器：
确保所有API响应格式一致
处理各种异常类型，提供友好的错误信息
添加请求ID便于调试
6. Swagger API文档
添加API文档：
使用 @nestjs/swagger 自动生成API文档
为所有端点添加描述和示例
使前端开发更容易理解API
7. 测试
添加单元测试和集成测试：
为关键服务和控制器编写测试
特别关注复杂的认证逻辑
确保安全功能正常工作
8. 配置和环境变量优化
确保所有敏感配置使用环境变量：
JWT密钥和过期时间
数据库凭据
实现配置验证

缓存模块
What is the Purpose of a Caching Module?
A caching module stores frequently accessed data to improve performance and reduce system load. It helps by:
✅ Speeding up operations – Avoids redundant computations and database queries.
✅ Reducing server load – Minimizes API calls and database access.
✅ Enhancing user experience – Improves response time and enables offline access.
✅ Saving bandwidth – Caches static resources like images, CSS, and JavaScript.
✅ Optimizing distributed systems – Uses tools like Redis or Memcached to share cached data across servers.
Caching is widely used in databases, APIs, browsers, and CDNs to boost efficiency. However, managing cache expiration and consistency is essential to avoid outdated data. 
缓存模块的作用是什么？
缓存模块 存储频繁访问的数据，以 提高性能并减少系统负载。它的作用包括：

✅ 加速操作 – 避免重复计算和数据库查询。
✅ 降低服务器压力 – 最小化 API 调用和数据库访问。
✅ 提升用户体验 – 改善响应时间，并支持离线访问。
✅ 节省带宽 – 缓存静态资源（如图片、CSS、JavaScript）。
✅ 优化分布式系统 – 通过 Redis 或 Memcached 共享缓存数据。

缓存广泛应用于 数据库、API、浏览器和 CDN，以提高系统效率。但需要 管理缓存过期和数据一致性，以避免使用过时数据。🚀